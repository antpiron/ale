\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename libale.info
@include version.texi
@settitle libale reference manual @value{VERSION}
@syncodeindex pg cp
@c %**end of header

@copying
This manual is for libale (version @value{VERSION}, @value{UPDATED}).

Copyright @copyright{} 2013 Anthony PIRON.
@end copying

@titlepage
@title libale reference manual
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Anthony PIRON (@email{anthony.piron@@skynet.be})     
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
     
@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Short Sample
     
This manual is for libale (version @value{VERSION}, @value{UPDATED}).
@end ifnottex

@menu
* Introduction::                
* Error::        
* Bitset::   
* Index::                       Complete index.
@end menu

@node Introduction, Error, Top, Top
@chapter Introduction

libale provides basic error handling, unlimited size bitset, portability layer for posix.


@node Error, Bitset, Introduction, Top
@chapter Error


@node Bitset, Index, Error, Top
@chapter Bitset

@example

#include <ale/bitset.h>

int
main(int argc, char *argv[ ]) 
@{
  struct bitset bs;

  bitset_init(&bs, 1024);
  bitset_free(bs);

  return EXIT_SUCCESS;
@}

@end example

@deftypefn {C Function} static inline int @
           bitset_init(struct bitset *@var{bs}, size_t @var{n})

Initialise the bitset @var{bs} to zero (unset) with a maximal size of @var{n} bits. Return -1 on error and set error_errno accordingly.
@end deftypefn

@deftypefn {C Function} static inline void @
           bitset_free(struct bitset @var{bs})

Desallocate @var{bs}.
@end deftypefn

@deftypefn {C Function} static inline void @
           bitset_reset(struct bitset @var{bs})

Reset the bitset @var{bs}.
@end deftypefn

@deftypefn {C Function} static inline void @
           bitset_set(struct bitset @var{bs}, size_t @var{index})

Set the bit at position @var{index} of the bitset @var{bs}.
@end deftypefn

@deftypefn {C Function} static inline void @
           bitset_unset(struct bitset @var{bs}, size_t @var{index})

Unset the bit at position @var{index} from the bitset @var{bs}.
@end deftypefn

@deftypefn {C Function} static inline int @
           bitset_isset(struct bitset @var{bs}, size_t @var{index})

Test the bit at position @var{index} from the bitset @var{bs}. Return 1 if the bit is set, 0 otherwise.
@end deftypefn

@deftypefn {C Function} static inline void @
           bitset_setrange(struct bitset @var{bs}, size_t @var{index}, size_t @var{len})

Set @var{len} bits from position @var{index} of the bitset @var{bs}.
@end deftypefn



@node Index,  , Bitset, Top
@unnumbered Index
     
@printindex cp
 
@bye

